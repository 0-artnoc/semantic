// This file was generated by proto-gen. Do not edit by hand.
syntax = "proto3";

package github.semantic.typescriptdiff;

import "types.proto";

option java_package = "com.github.semantic.typescriptdiff";
option go_package = "github.com/semantic/typescriptdiff;typescript";

message TypeScriptDiff {
  oneof diff {
    Merge merge = 1;
    Delete delete = 2;
    Insert insert = 3;
    Replace replace = 4;
  }
  message Merge {
    TypeScriptSyntax syntax = 1;
  }
  message Delete {
    TypeScriptSyntax before = 1;
  }
  message Insert {
    TypeScriptSyntax after = 1;
  }
  message Replace {
    TypeScriptSyntax before = 1;
    TypeScriptSyntax after = 2;
  }
}

message TypeScriptSyntax {
  oneof syntax {
    Comment comment = 1;
    HashBang hashBang = 2;
    Class class = 3;
    Function function = 4;
    Method method = 5;
    MethodSignature methodSignature = 6;
    InterfaceDeclaration interfaceDeclaration = 7;
    PublicFieldDefinition publicFieldDefinition = 8;
    VariableDeclaration variableDeclaration = 9;
    TypeAlias typeAlias = 10;
    Visibility visibility = 11;
    Plus plus = 12;
    Minus minus = 13;
    Times times = 14;
    DividedBy dividedBy = 15;
    Modulo modulo = 16;
    Power power = 17;
    Negate negate = 18;
    FloorDivision floorDivision = 19;
    BAnd bAnd = 20;
    BOr bOr = 21;
    BXOr bXOr = 22;
    LShift lShift = 23;
    RShift rShift = 24;
    UnsignedRShift unsignedRShift = 25;
    Complement complement = 26;
    And and = 27;
    Not not = 28;
    Or or = 29;
    XOr xOr = 30;
    Call call = 31;
    Cast cast = 32;
    LessThan lessThan = 33;
    LessThanEqual lessThanEqual = 34;
    GreaterThan greaterThan = 35;
    GreaterThanEqual greaterThanEqual = 36;
    Equal equal = 37;
    StrictEqual strictEqual = 38;
    Comparison comparison = 39;
    Enumeration enumeration = 40;
    MemberAccess memberAccess = 41;
    NonNullExpression nonNullExpression = 42;
    ScopeResolution scopeResolution = 43;
    SequenceExpression sequenceExpression = 44;
    Subscript subscript = 45;
    Member member = 46;
    Delete delete = 47;
    Void void = 48;
    Typeof typeof = 49;
    InstanceOf instanceOf = 50;
    New new = 51;
    Await await = 52;
    This this = 53;
    Array array = 54;
    Boolean boolean = 55;
    Float float = 56;
    Hash hash = 57;
    Integer integer = 58;
    KeyValue keyValue = 59;
    Null null = 60;
    String string = 61;
    TextElement textElement = 62;
    Regex regex = 63;
    Assignment assignment = 64;
    Break break = 65;
    Catch catch = 66;
    Continue continue = 67;
    DoWhile doWhile = 68;
    Else else = 69;
    Finally finally = 70;
    For for = 71;
    ForEach forEach = 72;
    If if = 73;
    Match match = 74;
    Pattern pattern = 75;
    Retry retry = 76;
    Return return = 77;
    ScopeEntry scopeEntry = 78;
    ScopeExit scopeExit = 79;
    Statements statements = 80;
    Throw throw = 81;
    Try try = 82;
    While while = 83;
    Yield yield = 84;
    AccessibilityModifier accessibilityModifier = 85;
    Empty empty = 86;
    Error error = 87;
    Identifier identifier = 88;
    Context context = 89;
    Readonly readonly = 90;
    TypeParameters typeParameters = 91;
    TypeParameter typeParameter = 92;
    Constraint constraint = 93;
    ParenthesizedType parenthesizedType = 94;
    DefaultType defaultType = 95;
    PredefinedType predefinedType = 96;
    TypeIdentifier typeIdentifier = 97;
    NestedIdentifier nestedIdentifier = 98;
    NestedTypeIdentifier nestedTypeIdentifier = 99;
    GenericType genericType = 100;
    TypeArguments typeArguments = 101;
    TypePredicate typePredicate = 102;
    CallSignature callSignature = 103;
    ConstructSignature constructSignature = 104;
    ArrayType arrayType = 105;
    LookupType lookupType = 106;
    FlowMaybeType flowMaybeType = 107;
    TypeQuery typeQuery = 108;
    IndexTypeQuery indexTypeQuery = 109;
    ThisType thisType = 110;
    ExistentialType existentialType = 111;
    AbstractMethodSignature abstractMethodSignature = 112;
    IndexSignature indexSignature = 113;
    ObjectType objectType = 114;
    LiteralType literalType = 115;
    Union union = 116;
    Intersection intersection = 117;
    Module module = 118;
    InternalModule internalModule = 119;
    FunctionType functionType = 120;
    Tuple tuple = 121;
    Constructor constructor = 122;
    TypeAssertion typeAssertion = 123;
    ImportAlias importAlias = 124;
    Debugger debugger = 125;
    ShorthandPropertyIdentifier shorthandPropertyIdentifier = 126;
    Super super = 127;
    Undefined undefined = 128;
    ClassHeritage classHeritage = 129;
    AbstractClass abstractClass = 130;
    ImplementsClause implementsClause = 131;
    JsxElement jsxElement = 132;
    JsxSelfClosingElement jsxSelfClosingElement = 133;
    JsxOpeningElement jsxOpeningElement = 134;
    JsxText jsxText = 135;
    JsxClosingElement jsxClosingElement = 136;
    JsxExpression jsxExpression = 137;
    JsxAttribute jsxAttribute = 138;
    JsxFragment jsxFragment = 139;
    JsxNamespaceName jsxNamespaceName = 140;
    OptionalParameter optionalParameter = 141;
    RequiredParameter requiredParameter = 142;
    RestParameter restParameter = 143;
    PropertySignature propertySignature = 144;
    AmbientDeclaration ambientDeclaration = 145;
    EnumDeclaration enumDeclaration = 146;
    ExtendsClause extendsClause = 147;
    AmbientFunction ambientFunction = 148;
    ImportRequireClause importRequireClause = 149;
    ImportClause importClause = 150;
    LabeledStatement labeledStatement = 151;
    Annotation annotation = 152;
    With with = 153;
    ForOf forOf = 154;
    Update update = 155;
    ComputedPropertyName computedPropertyName = 156;
    Decorator decorator = 157;
    Import import = 158;
    QualifiedAliasedImport qualifiedAliasedImport = 159;
    SideEffectImport sideEffectImport = 160;
    DefaultExport defaultExport = 161;
    QualifiedExport qualifiedExport = 162;
    QualifiedExportFrom qualifiedExportFrom = 163;
    JavaScriptRequire javaScriptRequire = 164;
    List list = 165;
    StatementBlock statementBlock = 166;
    MetaProperty metaProperty = 167;
  }
}

message Comment {
  string commentContent = 1;
}

message HashBang {
  string value = 1;
}

message Class {
  repeated TypeScriptDiff classContext = 1;
  TypeScriptDiff classIdentifier = 2;
  repeated TypeScriptDiff classSuperclasses = 3;
  TypeScriptDiff classBody = 4;
}

message Function {
  repeated TypeScriptDiff functionContext = 1;
  TypeScriptDiff functionName = 2;
  repeated TypeScriptDiff functionParameters = 3;
  TypeScriptDiff functionBody = 4;
}

message Method {
  repeated TypeScriptDiff methodContext = 1;
  TypeScriptDiff methodVisibility = 2;
  TypeScriptDiff methodReceiver = 3;
  TypeScriptDiff methodName = 4;
  repeated TypeScriptDiff methodParameters = 5;
  TypeScriptDiff methodBody = 6;
}

message MethodSignature {
  repeated TypeScriptDiff methodSignatureContext = 1;
  TypeScriptDiff methodSignatureName = 2;
  repeated TypeScriptDiff methodSignatureParameters = 3;
}

message InterfaceDeclaration {
  repeated TypeScriptDiff interfaceDeclarationContext = 1;
  TypeScriptDiff interfaceDeclarationIdentifier = 2;
  repeated TypeScriptDiff interfaceDeclarationSuperInterfaces = 3;
  TypeScriptDiff interfaceDeclarationBody = 4;
}

message PublicFieldDefinition {
  repeated TypeScriptDiff publicFieldContext = 1;
  TypeScriptDiff publicFieldPropertyName = 2;
  TypeScriptDiff publicFieldVisibility = 3;
  TypeScriptDiff publicFieldValue = 4;
}

message VariableDeclaration {
  repeated TypeScriptDiff variableDeclarations = 1;
}

message TypeAlias {
  repeated TypeScriptDiff typeAliasContext = 1;
  TypeScriptDiff typeAliasIdentifier = 2;
  TypeScriptDiff typeAliasKind = 3;
}

message Visibility { }

message Plus {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message Minus {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message Times {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message DividedBy {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message Modulo {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message Power {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message Negate {
  TypeScriptDiff value = 1;
}

message FloorDivision {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message BAnd {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message BOr {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message BXOr {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message LShift {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message RShift {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message UnsignedRShift {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message Complement {
  TypeScriptDiff value = 1;
}

message And {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message Not {
  TypeScriptDiff value = 1;
}

message Or {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message XOr {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message Call {
  repeated TypeScriptDiff callContext = 1;
  TypeScriptDiff callFunction = 2;
  repeated TypeScriptDiff callParams = 3;
  TypeScriptDiff callBlock = 4;
}

message Cast {
  TypeScriptDiff castSubject = 1;
  TypeScriptDiff castType = 2;
}

message LessThan {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message LessThanEqual {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message GreaterThan {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message GreaterThanEqual {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message Equal {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message StrictEqual {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message Comparison {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message Enumeration {
  TypeScriptDiff enumerationStart = 1;
  TypeScriptDiff enumerationEnd = 2;
  TypeScriptDiff enumerationStep = 3;
}

message MemberAccess {
  TypeScriptDiff lhs = 1;
  bytes rhs = 2;
}

message NonNullExpression {
  TypeScriptDiff nonNullExpression = 1;
}

message ScopeResolution {
  repeated TypeScriptDiff scopes = 1;
}

message SequenceExpression {
  TypeScriptDiff firstExpression = 1;
  TypeScriptDiff secondExpression = 2;
}

message Subscript {
  TypeScriptDiff lhs = 1;
  repeated TypeScriptDiff rhs = 2;
}

message Member {
  TypeScriptDiff lhs = 1;
  TypeScriptDiff rhs = 2;
}

message Delete {
  TypeScriptDiff value = 1;
}

message Void {
  TypeScriptDiff value = 1;
}

message Typeof {
  TypeScriptDiff value = 1;
}

message InstanceOf {
  TypeScriptDiff instanceOfSubject = 1;
  TypeScriptDiff instanceOfObject = 2;
}

message New {
  TypeScriptDiff newSubject = 1;
  TypeScriptDiff newTypeParameters = 2;
  repeated TypeScriptDiff newArguments = 3;
}

message Await {
  TypeScriptDiff awaitSubject = 1;
}

message This { }

message Array {
  repeated TypeScriptDiff arrayElements = 1;
}

message Boolean {
  bool booleanContent = 1;
}

message Float {
  string floatContent = 1;
}

message Hash {
  repeated TypeScriptDiff hashElements = 1;
}

message Integer {
  string integerContent = 1;
}

message KeyValue {
  TypeScriptDiff key = 1;
  TypeScriptDiff value = 2;
}

message Null { }

message String {
  repeated TypeScriptDiff stringElements = 1;
}

message TextElement {
  string textElementContent = 1;
}

message Regex {
  string regexContent = 1;
}

message Assignment {
  repeated TypeScriptDiff assignmentContext = 1;
  TypeScriptDiff assignmentTarget = 2;
  TypeScriptDiff assignmentValue = 3;
}

message Break {
  TypeScriptDiff value = 1;
}

message Catch {
  TypeScriptDiff catchException = 1;
  TypeScriptDiff catchBody = 2;
}

message Continue {
  TypeScriptDiff value = 1;
}

message DoWhile {
  TypeScriptDiff doWhileCondition = 1;
  TypeScriptDiff doWhileBody = 2;
}

message Else {
  TypeScriptDiff elseCondition = 1;
  TypeScriptDiff elseBody = 2;
}

message Finally {
  TypeScriptDiff value = 1;
}

message For {
  TypeScriptDiff forBefore = 1;
  TypeScriptDiff forCondition = 2;
  TypeScriptDiff forStep = 3;
  TypeScriptDiff forBody = 4;
}

message ForEach {
  TypeScriptDiff forEachBinding = 1;
  TypeScriptDiff forEachSubject = 2;
  TypeScriptDiff forEachBody = 3;
}

message If {
  TypeScriptDiff ifCondition = 1;
  TypeScriptDiff ifThenBody = 2;
  TypeScriptDiff ifElseBody = 3;
}

message Match {
  TypeScriptDiff matchSubject = 1;
  TypeScriptDiff matchPatterns = 2;
}

message Pattern {
  TypeScriptDiff value = 1;
  TypeScriptDiff patternBody = 2;
}

message Retry {
  TypeScriptDiff value = 1;
}

message Return {
  TypeScriptDiff value = 1;
}

message ScopeEntry {
  repeated TypeScriptDiff terms = 1;
}

message ScopeExit {
  repeated TypeScriptDiff terms = 1;
}

message Statements {
  repeated TypeScriptDiff statements = 1;
}

message Throw {
  TypeScriptDiff value = 1;
}

message Try {
  TypeScriptDiff tryBody = 1;
  repeated TypeScriptDiff tryCatch = 2;
}

message While {
  TypeScriptDiff whileCondition = 1;
  TypeScriptDiff whileBody = 2;
}

message Yield {
  TypeScriptDiff value = 1;
}

message AccessibilityModifier {
  string contents = 1;
}

message Empty { }

message Error {
  repeated ErrorSite errorCallStack = 1;
  repeated string errorExpected = 2;
  string errorActual = 3;
  repeated TypeScriptDiff errorChildren = 4;
}

message Identifier {
  bytes name = 1;
}

message Context {
  repeated TypeScriptDiff contextTerms = 1;
  TypeScriptDiff contextSubject = 2;
}

message Readonly { }

message TypeParameters {
  repeated TypeScriptDiff terms = 1;
}

message TypeParameter {
  TypeScriptDiff typeParameter = 1;
  TypeScriptDiff typeParameterConstraint = 2;
  TypeScriptDiff typeParameterDefaultType = 3;
}

message Constraint {
  TypeScriptDiff constraintType = 1;
}

message ParenthesizedType {
  TypeScriptDiff parenthesizedType = 1;
}

message DefaultType {
  TypeScriptDiff defaultType = 1;
}

message PredefinedType {
  string predefinedType = 1;
}

message TypeIdentifier {
  string contents = 1;
}

message NestedIdentifier {
  TypeScriptDiff left = 1;
  TypeScriptDiff right = 2;
}

message NestedTypeIdentifier {
  TypeScriptDiff left = 1;
  TypeScriptDiff right = 2;
}

message GenericType {
  TypeScriptDiff genericTypeIdentifier = 1;
  TypeScriptDiff genericTypeArguments = 2;
}

message TypeArguments {
  repeated TypeScriptDiff typeArguments = 1;
}

message TypePredicate {
  TypeScriptDiff typePredicateIdentifier = 1;
  TypeScriptDiff typePredicateType = 2;
}

message CallSignature {
  TypeScriptDiff callSignatureTypeParameters = 1;
  repeated TypeScriptDiff callSignatureParameters = 2;
  TypeScriptDiff callSignatureType = 3;
}

message ConstructSignature {
  TypeScriptDiff constructSignatureTypeParameters = 1;
  repeated TypeScriptDiff constructSignatureParameters = 2;
  TypeScriptDiff constructSignatureType = 3;
}

message ArrayType {
  TypeScriptDiff arrayType = 1;
}

message LookupType {
  TypeScriptDiff lookupTypeIdentifier = 1;
  TypeScriptDiff lookupTypeKey = 2;
}

message FlowMaybeType {
  TypeScriptDiff flowMaybeType = 1;
}

message TypeQuery {
  TypeScriptDiff typeQuerySubject = 1;
}

message IndexTypeQuery {
  TypeScriptDiff indexTypeQuerySubject = 1;
}

message ThisType {
  string contents = 1;
}

message ExistentialType {
  string contents = 1;
}

message AbstractMethodSignature {
  repeated TypeScriptDiff abstractMethodSignatureContext = 1;
  TypeScriptDiff abstractMethodSignatureName = 2;
  repeated TypeScriptDiff abstractMethodSignatureParameters = 3;
}

message IndexSignature {
  TypeScriptDiff subject = 1;
  TypeScriptDiff subjectType = 2;
  TypeScriptDiff typeAnnotation = 3;
}

message ObjectType {
  repeated TypeScriptDiff objectTypeElements = 1;
}

message LiteralType {
  TypeScriptDiff literalTypeSubject = 1;
}

message Union {
  TypeScriptDiff unionLeft = 1;
  TypeScriptDiff unionRight = 2;
}

message Intersection {
  TypeScriptDiff intersectionLeft = 1;
  TypeScriptDiff intersectionRight = 2;
}

message Module {
  TypeScriptDiff moduleIdentifier = 1;
  repeated TypeScriptDiff moduleStatements = 2;
}

message InternalModule {
  TypeScriptDiff internalModuleIdentifier = 1;
  repeated TypeScriptDiff internalModuleStatements = 2;
}

message FunctionType {
  TypeScriptDiff functionTypeParameters = 1;
  repeated TypeScriptDiff functionFormalParameters = 2;
  TypeScriptDiff functionType = 3;
}

message Tuple {
  repeated TypeScriptDiff tupleElements = 1;
}

message Constructor {
  TypeScriptDiff constructorTypeParameters = 1;
  repeated TypeScriptDiff constructorFormalParameters = 2;
  TypeScriptDiff constructorType = 3;
}

message TypeAssertion {
  TypeScriptDiff typeAssertionParameters = 1;
  TypeScriptDiff typeAssertionExpression = 2;
}

message ImportAlias {
  TypeScriptDiff importAliasSubject = 1;
  TypeScriptDiff importAlias = 2;
}

message Debugger { }

message ShorthandPropertyIdentifier {
  string contents = 1;
}

message Super { }

message Undefined { }

message ClassHeritage {
  TypeScriptDiff classHeritageExtendsClause = 1;
  TypeScriptDiff implementsClause = 2;
}

message AbstractClass {
  TypeScriptDiff abstractClassIdentifier = 1;
  TypeScriptDiff abstractClassTypeParameters = 2;
  repeated TypeScriptDiff classHeritage = 3;
  TypeScriptDiff classBody = 4;
}

message ImplementsClause {
  repeated TypeScriptDiff implementsClauseTypes = 1;
}

message JsxElement {
  TypeScriptDiff jsxOpeningElement = 1;
  repeated TypeScriptDiff jsxElements = 2;
  TypeScriptDiff jsxClosingElement = 3;
}

message JsxSelfClosingElement {
  TypeScriptDiff jsxSelfClosingElementIdentifier = 1;
  repeated TypeScriptDiff jsxSelfClosingElementAttributes = 2;
}

message JsxOpeningElement {
  TypeScriptDiff jsxOpeningElementIdentifier = 1;
  repeated TypeScriptDiff jsxAttributes = 2;
}

message JsxText {
  string contents = 1;
}

message JsxClosingElement {
  TypeScriptDiff jsxClosingElementIdentifier = 1;
}

message JsxExpression {
  TypeScriptDiff jsxExpression = 1;
}

message JsxAttribute {
  TypeScriptDiff jsxAttributeTarget = 1;
  TypeScriptDiff jsxAttributeValue = 2;
}

message JsxFragment {
  repeated TypeScriptDiff terms = 1;
}

message JsxNamespaceName {
  TypeScriptDiff left = 1;
  TypeScriptDiff right = 2;
}

message OptionalParameter {
  repeated TypeScriptDiff optionalParameterContext = 1;
  TypeScriptDiff optionalParameterSubject = 2;
}

message RequiredParameter {
  repeated TypeScriptDiff requiredParameterContext = 1;
  TypeScriptDiff requiredParameterSubject = 2;
  TypeScriptDiff requiredParameterValue = 3;
}

message RestParameter {
  repeated TypeScriptDiff restParameterContext = 1;
  TypeScriptDiff restParameterSubject = 2;
}

message PropertySignature {
  repeated TypeScriptDiff modifiers = 1;
  TypeScriptDiff propertySignaturePropertyName = 2;
}

message AmbientDeclaration {
  TypeScriptDiff ambientDeclarationBody = 1;
}

message EnumDeclaration {
  TypeScriptDiff enumDeclarationIdentifier = 1;
  repeated TypeScriptDiff enumDeclarationBody = 2;
}

message ExtendsClause {
  repeated TypeScriptDiff extendsClauses = 1;
}

message AmbientFunction {
  repeated TypeScriptDiff ambientFunctionContext = 1;
  TypeScriptDiff ambientFunctionIdentifier = 2;
  repeated TypeScriptDiff ambientFunctionParameters = 3;
}

message ImportRequireClause {
  TypeScriptDiff importRequireIdentifier = 1;
  TypeScriptDiff importRequireSubject = 2;
}

message ImportClause {
  repeated TypeScriptDiff importClauseElements = 1;
}

message LabeledStatement {
  TypeScriptDiff labeledStatementIdentifier = 1;
  TypeScriptDiff labeledStatementSubject = 2;
}

message Annotation {
  TypeScriptDiff annotationType = 1;
}

message With {
  TypeScriptDiff withExpression = 1;
  TypeScriptDiff withBody = 2;
}

message ForOf {
  TypeScriptDiff forOfBinding = 1;
  TypeScriptDiff forOfSubject = 2;
  TypeScriptDiff forOfBody = 3;
}

message Update {
  TypeScriptDiff updateSubject = 1;
}

message ComputedPropertyName {
  TypeScriptDiff propertyName = 1;
}

message Decorator {
  TypeScriptDiff decoratorTerm = 1;
}

message Import {
  repeated Alias importSymbols = 1;
  ImportPath importFrom = 2;
}

message QualifiedAliasedImport {
  TypeScriptDiff qualifiedAliasedImportAlias = 1;
  ImportPath qualifiedAliasedImportFrom = 2;
}

message SideEffectImport {
  ImportPath sideEffectImportFrom = 1;
}

message DefaultExport {
  TypeScriptDiff defaultExport = 1;
}

message QualifiedExport {
  repeated Alias qualifiedExportSymbols = 1;
}

message QualifiedExportFrom {
  ImportPath qualifiedExportFrom = 1;
  repeated Alias qualifiedExportFromSymbols = 2;
}

message JavaScriptRequire {
  TypeScriptDiff javascriptRequireIden = 1;
  ImportPath javascriptRequireFrom = 2;
}

message List {
  repeated TypeScriptDiff listContent = 1;
}

message StatementBlock {
  repeated TypeScriptDiff statements = 1;
}

message MetaProperty { }

message Alias {
  bytes aliasValue = 1;
  bytes aliasName = 2;
}

message ImportPath {
  string unPath = 1;
  IsRelative pathIsRelative = 2;
}

enum IsRelative {
  Unknown = 0;
  Relative = 1;
  NonRelative = 2;
}
