// This file was generated by proto-gen. Do not edit by hand.
syntax = "proto3";

package github.semantic.phpterm;

import "types.proto";

option java_package = "com.github.semantic.phpterm";
option go_package = "github.com/semantic/phpterm;php";

message PHPTerm {
  PHPSyntax syntax = 1;
}

message PHPSyntax {
  oneof syntax {
    Comment comment = 1;
    Class class = 2;
    Function function = 3;
    Method method = 4;
    VariableDeclaration variableDeclaration = 5;
    AccessControl accessControl = 6;
    Plus plus = 7;
    Minus minus = 8;
    Times times = 9;
    DividedBy dividedBy = 10;
    Modulo modulo = 11;
    Power power = 12;
    Negate negate = 13;
    FloorDivision floorDivision = 14;
    BAnd bAnd = 15;
    BOr bOr = 16;
    BXOr bXOr = 17;
    LShift lShift = 18;
    RShift rShift = 19;
    And and = 20;
    Not not = 21;
    Or or = 22;
    XOr xOr = 23;
    Call call = 24;
    Cast cast = 25;
    LessThan lessThan = 26;
    LessThanEqual lessThanEqual = 27;
    GreaterThan greaterThan = 28;
    GreaterThanEqual greaterThanEqual = 29;
    Equal equal = 30;
    StrictEqual strictEqual = 31;
    Comparison comparison = 32;
    InstanceOf instanceOf = 33;
    MemberAccess memberAccess = 34;
    New new = 35;
    SequenceExpression sequenceExpression = 36;
    Subscript subscript = 37;
    Member member = 38;
    Array array = 39;
    Float float = 40;
    Integer integer = 41;
    KeyValue keyValue = 42;
    TextElement textElement = 43;
    Assignment assignment = 44;
    Break break = 45;
    Catch catch = 46;
    Continue continue = 47;
    DoWhile doWhile = 48;
    Else else = 49;
    Finally finally = 50;
    For for = 51;
    ForEach forEach = 52;
    Goto goto = 53;
    If if = 54;
    Match match = 55;
    Pattern pattern = 56;
    Return return = 57;
    Statements statements = 58;
    Throw throw = 59;
    Try try = 60;
    While while = 61;
    Yield yield = 62;
    AliasAs aliasAs = 63;
    ArrayElement arrayElement = 64;
    BaseTypeDeclaration baseTypeDeclaration = 65;
    CastType castType = 66;
    ClassBaseClause classBaseClause = 67;
    ClassConstDeclaration classConstDeclaration = 68;
    ClassInterfaceClause classInterfaceClause = 69;
    ClassModifier classModifier = 70;
    Clone clone = 71;
    ConstDeclaration constDeclaration = 72;
    ConstructorDeclaration constructorDeclaration = 73;
    Context context = 74;
    Declare declare = 75;
    DeclareDirective declareDirective = 76;
    DestructorDeclaration destructorDeclaration = 77;
    Echo echo = 78;
    Empty empty = 79;
    EmptyIntrinsic emptyIntrinsic = 80;
    Error error = 81;
    ErrorControl errorControl = 82;
    EvalIntrinsic evalIntrinsic = 83;
    ExitIntrinsic exitIntrinsic = 84;
    GlobalDeclaration globalDeclaration = 85;
    Identifier identifier = 86;
    Include include = 87;
    IncludeOnce includeOnce = 88;
    InsteadOf insteadOf = 89;
    InterfaceBaseClause interfaceBaseClause = 90;
    InterfaceDeclaration interfaceDeclaration = 91;
    IssetIntrinsic issetIntrinsic = 92;
    LabeledStatement labeledStatement = 93;
    Namespace namespace = 94;
    NamespaceAliasingClause namespaceAliasingClause = 95;
    NamespaceName namespaceName = 96;
    NamespaceUseClause namespaceUseClause = 97;
    NamespaceUseDeclaration namespaceUseDeclaration = 98;
    NamespaceUseGroupClause namespaceUseGroupClause = 99;
    NewVariable newVariable = 100;
    PrintIntrinsic printIntrinsic = 101;
    PropertyDeclaration propertyDeclaration = 102;
    PropertyModifier propertyModifier = 103;
    QualifiedName qualifiedName = 104;
    RelativeScope relativeScope = 105;
    Require require = 106;
    RequireOnce requireOnce = 107;
    ReturnType returnType = 108;
    ScalarType scalarType = 109;
    ShellCommand shellCommand = 110;
    SimpleVariable simpleVariable = 111;
    Static static = 112;
    Text text = 113;
    TraitDeclaration traitDeclaration = 114;
    TraitUseClause traitUseClause = 115;
    TraitUseSpecification traitUseSpecification = 116;
    TypeDeclaration typeDeclaration = 117;
    Unset unset = 118;
    Update update = 119;
    UseClause useClause = 120;
    VariableName variableName = 121;
    Annotation annotation = 122;
    List list = 123;
  }
}

message Comment {
  string commentContent = 1;
}

message Class {
  repeated PHPTerm classContext = 1;
  PHPTerm classIdentifier = 2;
  repeated PHPTerm classSuperclasses = 3;
  PHPTerm classBody = 4;
}

message Function {
  repeated PHPTerm functionContext = 1;
  PHPTerm functionName = 2;
  repeated PHPTerm functionParameters = 3;
  PHPTerm functionBody = 4;
}

message Method {
  repeated PHPTerm methodContext = 1;
  PHPTerm methodAccessControl = 2;
  PHPTerm methodReceiver = 3;
  PHPTerm methodName = 4;
  repeated PHPTerm methodParameters = 5;
  PHPTerm methodBody = 6;
}

message VariableDeclaration {
  repeated PHPTerm variableDeclarations = 1;
}

message AccessControl { }

message Plus {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message Minus {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message Times {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message DividedBy {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message Modulo {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message Power {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message Negate {
  PHPTerm value = 1;
}

message FloorDivision {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message BAnd {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message BOr {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message BXOr {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message LShift {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message RShift {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message And {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message Not {
  PHPTerm value = 1;
}

message Or {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message XOr {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message Call {
  repeated PHPTerm callContext = 1;
  PHPTerm callFunction = 2;
  repeated PHPTerm callParams = 3;
  PHPTerm callBlock = 4;
}

message Cast {
  PHPTerm castSubject = 1;
  PHPTerm castType = 2;
}

message LessThan {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message LessThanEqual {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message GreaterThan {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message GreaterThanEqual {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message Equal {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message StrictEqual {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message Comparison {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message InstanceOf {
  PHPTerm instanceOfSubject = 1;
  PHPTerm instanceOfObject = 2;
}

message MemberAccess {
  PHPTerm lhs = 1;
  bytes rhs = 2;
}

message New {
  PHPTerm newSubject = 1;
  PHPTerm newTypeParameters = 2;
  repeated PHPTerm newArguments = 3;
}

message SequenceExpression {
  PHPTerm firstExpression = 1;
  PHPTerm secondExpression = 2;
}

message Subscript {
  PHPTerm lhs = 1;
  repeated PHPTerm rhs = 2;
}

message Member {
  PHPTerm lhs = 1;
  PHPTerm rhs = 2;
}

message Array {
  repeated PHPTerm arrayElements = 1;
}

message Float {
  string floatContent = 1;
}

message Integer {
  string integerContent = 1;
}

message KeyValue {
  PHPTerm key = 1;
  PHPTerm value = 2;
}

message TextElement {
  string textElementContent = 1;
}

message Assignment {
  repeated PHPTerm assignmentContext = 1;
  PHPTerm assignmentTarget = 2;
  PHPTerm assignmentValue = 3;
}

message Break {
  PHPTerm value = 1;
}

message Catch {
  PHPTerm catchException = 1;
  PHPTerm catchBody = 2;
}

message Continue {
  PHPTerm value = 1;
}

message DoWhile {
  PHPTerm doWhileCondition = 1;
  PHPTerm doWhileBody = 2;
}

message Else {
  PHPTerm elseCondition = 1;
  PHPTerm elseBody = 2;
}

message Finally {
  PHPTerm value = 1;
}

message For {
  PHPTerm forBefore = 1;
  PHPTerm forCondition = 2;
  PHPTerm forStep = 3;
  PHPTerm forBody = 4;
}

message ForEach {
  PHPTerm forEachBinding = 1;
  PHPTerm forEachSubject = 2;
  PHPTerm forEachBody = 3;
}

message Goto {
  PHPTerm gotoLocation = 1;
}

message If {
  PHPTerm ifCondition = 1;
  PHPTerm ifThenBody = 2;
  PHPTerm ifElseBody = 3;
}

message Match {
  PHPTerm matchSubject = 1;
  PHPTerm matchPatterns = 2;
}

message Pattern {
  PHPTerm value = 1;
  PHPTerm patternBody = 2;
}

message Return {
  PHPTerm value = 1;
}

message Statements {
  repeated PHPTerm statements = 1;
}

message Throw {
  PHPTerm value = 1;
}

message Try {
  PHPTerm tryBody = 1;
  repeated PHPTerm tryCatch = 2;
}

message While {
  PHPTerm whileCondition = 1;
  PHPTerm whileBody = 2;
}

message Yield {
  PHPTerm value = 1;
}

message AliasAs {
  PHPTerm aliasAsName = 1;
  PHPTerm aliasAsModifier = 2;
  PHPTerm aliasAsClause = 3;
}

message ArrayElement {
  PHPTerm value = 1;
}

message BaseTypeDeclaration {
  PHPTerm value = 1;
}

message CastType {
  string _castType = 1;
}

message ClassBaseClause {
  PHPTerm value = 1;
}

message ClassConstDeclaration {
  PHPTerm visibility = 1;
  repeated PHPTerm elements = 2;
}

message ClassInterfaceClause {
  repeated PHPTerm values = 1;
}

message ClassModifier {
  string value = 1;
}

message Clone {
  PHPTerm value = 1;
}

message ConstDeclaration {
  repeated PHPTerm values = 1;
}

message ConstructorDeclaration {
  repeated PHPTerm modifiers = 1;
  repeated PHPTerm parameters = 2;
  PHPTerm body = 3;
}

message Context {
  repeated PHPTerm contextTerms = 1;
  PHPTerm contextSubject = 2;
}

message Declare {
  PHPTerm left = 1;
  PHPTerm right = 2;
}

message DeclareDirective {
  PHPTerm value = 1;
}

message DestructorDeclaration {
  repeated PHPTerm body = 1;
  PHPTerm name = 2;
}

message Echo {
  PHPTerm value = 1;
}

message Empty { }

message EmptyIntrinsic {
  PHPTerm value = 1;
}

message Error {
  repeated ErrorSite errorCallStack = 1;
  repeated string errorExpected = 2;
  string errorActual = 3;
  repeated PHPTerm errorChildren = 4;
}

message ErrorControl {
  PHPTerm value = 1;
}

message EvalIntrinsic {
  PHPTerm value = 1;
}

message ExitIntrinsic {
  PHPTerm value = 1;
}

message GlobalDeclaration {
  repeated PHPTerm values = 1;
}

message Identifier {
  bytes name = 1;
}

message Include {
  PHPTerm value = 1;
}

message IncludeOnce {
  PHPTerm value = 1;
}

message InsteadOf {
  PHPTerm left = 1;
  PHPTerm right = 2;
}

message InterfaceBaseClause {
  repeated PHPTerm values = 1;
}

message InterfaceDeclaration {
  PHPTerm name = 1;
  PHPTerm base = 2;
  repeated PHPTerm declarations = 3;
}

message IssetIntrinsic {
  PHPTerm value = 1;
}

message LabeledStatement {
  PHPTerm _labeledStatementIdentifier = 1;
}

message Namespace {
  repeated PHPTerm namespaceName = 1;
  PHPTerm namespaceBody = 2;
}

message NamespaceAliasingClause {
  PHPTerm value = 1;
}

message NamespaceName {
  repeated PHPTerm names = 1;
}

message NamespaceUseClause {
  repeated PHPTerm values = 1;
}

message NamespaceUseDeclaration {
  repeated PHPTerm values = 1;
}

message NamespaceUseGroupClause {
  repeated PHPTerm values = 1;
}

message NewVariable {
  repeated PHPTerm values = 1;
}

message PrintIntrinsic {
  PHPTerm value = 1;
}

message PropertyDeclaration {
  PHPTerm modifier = 1;
  repeated PHPTerm elements = 2;
}

message PropertyModifier {
  PHPTerm visibility = 1;
  PHPTerm static = 2;
}

message QualifiedName {
  PHPTerm name = 1;
  PHPTerm identifier = 2;
}

message RelativeScope {
  string value = 1;
}

message Require {
  PHPTerm value = 1;
}

message RequireOnce {
  PHPTerm value = 1;
}

message ReturnType {
  PHPTerm value = 1;
}

message ScalarType {
  string value = 1;
}

message ShellCommand {
  string value = 1;
}

message SimpleVariable {
  PHPTerm value = 1;
}

message Static {
  string value = 1;
}

message Text {
  string value = 1;
}

message TraitDeclaration {
  PHPTerm traitName = 1;
  repeated PHPTerm traitStatements = 2;
}

message TraitUseClause {
  repeated PHPTerm namespace = 1;
  PHPTerm alias = 2;
}

message TraitUseSpecification {
  repeated PHPTerm values = 1;
}

message TypeDeclaration {
  PHPTerm value = 1;
}

message Unset {
  PHPTerm value = 1;
}

message Update {
  PHPTerm _updateSubject = 1;
}

message UseClause {
  repeated PHPTerm values = 1;
}

message VariableName {
  PHPTerm value = 1;
}

message Annotation {
  PHPTerm annotationSubject = 1;
  PHPTerm annotationType = 2;
}

message List {
  repeated PHPTerm listContent = 1;
}

message Alias {
  bytes aliasValue = 1;
  bytes aliasName = 2;
}

message ImportPath {
  string unPath = 1;
  IsRelative pathIsRelative = 2;
}

enum IsRelative {
  Unknown = 0;
  Relative = 1;
  NonRelative = 2;
}
