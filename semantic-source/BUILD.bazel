# Set all targetâ€™s visibility in this package to "public".
package(default_visibility = ["//visibility:public"])

# Load rules_haskell rules.
load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_library",
    "haskell_test",
    "haskell_toolchain_library",
)
load(
    "@rules_haskell//haskell:cabal.bzl",
    "haskell_cabal_binary",
    "haskell_cabal_library",
)
load(
    "@rules_haskell//haskell:doctest.bzl",
    "haskell_doctest",
    "haskell_doctest_toolchain",
)
load(
    "//:build/common.bzl",
    "STANDARD_GHC_WARNINGS",
)

# haskell_toolchain_library can access builtin GHC packages
# and assign them a bazel target name, so that they
# can be referenced as dependencies.
haskell_toolchain_library(name = "base")

haskell_library(
    name = "lib",
    srcs = glob(["src/**/*.hs"]),
    compiler_flags = STANDARD_GHC_WARNINGS + ["-XOverloadedStrings"],
    deps = [
        ":base",
        "@stackage//:aeson",
        "@stackage//:bytestring",
        "@stackage//:containers",
        "@stackage//:deepseq",
        "@stackage//:filepath",
        "@stackage//:generic-monoid",
        "@stackage//:hashable",
        "@stackage//:pathtype",
        "@stackage//:semilattices",
        "@stackage//:text",
    ],
)

haskell_test(
    name = "test",
    srcs = [
        "test/Source/Test.hs",
        "test/Test.hs",
    ],
    compiler_flags = STANDARD_GHC_WARNINGS,
    deps = [
        ":base",
        ":lib",
        "@stackage//:hedgehog",
        "@stackage//:tasty",
        "@stackage//:tasty-hedgehog",
        "@stackage//:tasty-hunit",
        "@stackage//:text",
    ],
)

haskell_doctest(
    name = "doctest-lib",
    modules = ["Source.Range"],  # exclude Baz and succeed
    visibility = ["//visibility:public"],
    deps = [":lib-b"],
)

haskell_doctest(
    name = "doctest",
    modules = ["Source.Range"],
    deps = [":doctest-lib"],
)
