# Set all targetâ€™s visibility in this package to "public".
package(default_visibility = ["//visibility:public"])

# Load rules_haskell rules.
load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_binary",
    "haskell_library",
    "haskell_toolchain_library",
)
load(
    "@rules_haskell//haskell:cabal.bzl",
    "haskell_cabal_binary",
    "haskell_cabal_library",
)

# haskell_toolchain_library can access builtin GHC packages
# and assign them a bazel target name, so that they
# can be referenced as dependencies.
haskell_toolchain_library(name = "base")

haskell_toolchain_library(name = "ghc-prim")

# You can add your own libraries with haskell_library.
haskell_library(
    name = "lib",
    srcs = glob(["src/**/*.hs"]),
    src_strip_prefix = "src",
    deps = [
        ":base",
        ":ghc-prim",
        "//semantic-analysis:lib",
        "//semantic-ast:lib",
        "//semantic-codeql:lib",
        "//semantic-go:lib",
        "//semantic-java:lib",
        "//semantic-json:lib",
        "//semantic-php:lib",
        "//semantic-proto:lib",
        "//semantic-python:lib",
        "//semantic-ruby:lib",
        "//semantic-scope-graph:lib",
        "//semantic-source:lib",
        "//semantic-tags:lib",
        "//semantic-tsx:lib",
        "//semantic-typescript:lib",
        "@stackage//:aeson",
        "@stackage//:algebraic-graphs",
        "@stackage//:ansi-terminal",
        "@stackage//:array",
        "@stackage//:async",
        "@stackage//:attoparsec",
        "@stackage//:bifunctors",
        "@stackage//:bytestring",
        "@stackage//:containers",
        "@stackage//:deepseq",
        "@stackage//:directory",
        "@stackage//:directory-tree",
        "@stackage//:fastsum",
        "@stackage//:filepath",
        "@stackage//:fused-effects",
        "@stackage//:fused-effects-exceptions",
        "@stackage//:fused-effects-resumable",
        "@stackage//:fused-syntax",
        "@stackage//:generic-lens",
        "@stackage//:generic-monoid",
        "@stackage//:gitrev",
        "@stackage//:hashable",
        "@stackage//:haskeline",
        "@stackage//:hostname",
        "@stackage//:hscolour",
        "@stackage//:kdt",
        "@stackage//:lens",
        "@stackage//:mersenne-random-pure64",
        "@stackage//:mtl",
        "@stackage//:network",
        "@stackage//:network-uri",
        "@stackage//:optparse-applicative",
        "@stackage//:parallel",
        "@stackage//:parsers",
        "@stackage//:pathtype",
        "@stackage//:pretty-show",
        "@stackage//:prettyprinter",
        "@stackage//:process",
        "@stackage//:profunctors",
        "@stackage//:proto-lens",
        "@stackage//:proto-lens-runtime",
        "@stackage//:recursion-schemes",
        "@stackage//:reducers",
        "@stackage//:safe-exceptions",
        "@stackage//:scientific",
        "@stackage//:semigroupoids",
        "@stackage//:semilattices",
        "@stackage//:split",
        "@stackage//:streaming",
        "@stackage//:template-haskell",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:tree-sitter",
        "@stackage//:tree-sitter-tsx",
        "@stackage//:unix",
        "@stackage//:unordered-containers",
        "@stackage//:vector",
    ],
)
