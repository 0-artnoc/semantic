syntax = "proto3";
package github.semantic.v1alpha1;
enum Language {Unknown = 0;
               Go = 1;
               Haskell = 2;
               Java = 3;
               JavaScript = 4;
               JSON = 5;
               JSX = 6;
               Markdown = 7;
               Python = 8;
               Ruby = 9;
               TypeScript = 10;
               PHP = 11;}
message Blob { bytes blobSource = 1;
               string blobPath = 2;
               Language blobLanguage = 3;
             }
message Pos { int64 posLine = 1;
              int64 posColumn = 2;
            }
message Span { Pos spanStart = 1;
               Pos spanEnd = 2;
             }
message SrcLoc { string srcLocPackage = 1;
                 string srcLocModule = 2;
                 string srcLocFile = 3;
                 int64 srcLocStartLine = 4;
                 int64 srcLocStartCol = 5;
                 int64 srcLocEndLine = 6;
                 int64 srcLocEndCol = 7;
               }
message ErrorSite { string errorMessage = 1;
                    SrcLoc errorLocation = 2;
                  }
message Error { repeated ErrorSite errorCallStack = 1;
                repeated string errorExpected = 2;
                string errorActual = 3;
                repeated Term errorChildren = 4;
              }
message Array { repeated Term arrayElements = 1;
              }
message Boolean { bool booleanContent = 1;
                }
message Hash { repeated Term hashElements = 1;
             }
message Float { string floatContent = 1;
              }
message KeyValue { Term key = 1;
                   Term value = 2;
                 }
message Null {
             }
message TextElement { string textElementContent = 1;
                    }
message Statements { repeated Term statements = 1;
                   }
message Comment { string commentContent = 1;
                }
message Function { repeated Term functionContext = 1;
                   Term functionName = 2;
                   repeated Term functionParameters = 3;
                   Term functionBody = 4;
                 }
message Method { repeated Term methodContext = 1;
                 Term methodReceiver = 2;
                 Term methodName = 3;
                 repeated Term methodParameters = 4;
                 Term methodBody = 5;
               }
message File {
             }
message Line {
             }
message Plus { Term lhs = 1;
               Term rhs = 2;
             }
message Minus { Term lhs = 1;
                Term rhs = 2;
              }
message Times { Term lhs = 1;
                Term rhs = 2;
              }
message DividedBy { Term lhs = 1;
                    Term rhs = 2;
                  }
message Modulo { Term lhs = 1;
                 Term rhs = 2;
               }
message Power { Term lhs = 1;
                Term rhs = 2;
              }
message Negate { Term term = 1;
               }
message FloorDivision { Term lhs = 1;
                        Term rhs = 2;
                      }
message BAnd { Term left = 1;
               Term right = 2;
             }
message BOr { Term left = 1;
              Term right = 2;
            }
message BXOr { Term left = 1;
               Term right = 2;
             }
message LShift { Term left = 1;
                 Term right = 2;
               }
message RShift { Term left = 1;
                 Term right = 2;
               }
message Complement { Term value = 1;
                   }
message And { Term lhs = 1;
              Term rhs = 2;
            }
message Not { Term term = 1;
            }
message Or { Term lhs = 1;
             Term rhs = 2;
           }
message XOr { Term lhs = 1;
              Term rhs = 2;
            }
message Call { repeated Term callContext = 1;
               Term callFunction = 2;
               repeated Term callParams = 3;
               Term callBlock = 4;
             }
message LessThan { Term lhs = 1;
                   Term rhs = 2;
                 }
message LessThanEqual { Term lhs = 1;
                        Term rhs = 2;
                      }
message GreaterThan { Term lhs = 1;
                      Term rhs = 2;
                    }
message GreaterThanEqual { Term lhs = 1;
                           Term rhs = 2;
                         }
message Equal { Term lhs = 1;
                Term rhs = 2;
              }
message StrictEqual { Term lhs = 1;
                      Term rhs = 2;
                    }
message Comparison { Term lhs = 1;
                     Term rhs = 2;
                   }
message Enumeration { Term enumerationStart = 1;
                      Term enumerationEnd = 2;
                      Term enumerationStep = 3;
                    }
message Matches { Term lhs = 1;
                  Term rhs = 2;
                }
message NotMatches { Term lhs = 1;
                     Term rhs = 2;
                   }
message MemberAccess { Term lhs = 1;
                       bytes rhs = 2;
                     }
message ScopeResolution { repeated Term scopes = 1;
                        }
message Subscript { Term lhs = 1;
                    repeated Term rhs = 2;
                  }
message Member { Term lhs = 1;
                 Term rhs = 2;
               }
message String { repeated Term stringElements = 1;
               }
message Complex { string value = 1;
                }
message Integer { string integerContent = 1;
                }
message Rational { string value = 1;
                 }
message Regex { string regexContent = 1;
              }
message Symbol { string symbolContent = 1;
               }
message Assignment { repeated Term assignmentContext = 1;
                     Term assignmentTarget = 2;
                     Term assignmentValue = 3;
                   }
message Break { Term term = 1;
              }
message Catch { Term catchException = 1;
                Term catchBody = 2;
              }
message Continue { Term term = 1;
                 }
message Else { Term elseCondition = 1;
               Term elseBody = 2;
             }
message Finally { Term term = 1;
                }
message ForEach { Term forEachBinding = 1;
                  Term forEachSubject = 2;
                  Term forEachBody = 3;
                }
message If { Term ifCondition = 1;
             Term ifThenBody = 2;
             Term ifElseBody = 3;
           }
message Match { Term matchSubject = 1;
                Term matchPatterns = 2;
              }
message Pattern { Term _pattern = 1;
                  Term patternBody = 2;
                }
message Retry { Term term = 1;
              }
message Return { Term term = 1;
               }
message ScopeEntry { repeated Term terms = 1;
                   }
message ScopeExit { repeated Term terms = 1;
                  }
message Try { Term tryBody = 1;
              repeated Term tryCatch = 2;
            }
message While { Term whileCondition = 1;
                Term whileBody = 2;
              }
message Yield { Term term = 1;
              }
message Context { repeated Term contextTerms = 1;
                  Term contextSubject = 2;
                }
message Empty {
              }
message Identifier { bytes name = 1;
                   }
message Class { Term classIdentifier = 1;
                repeated Term classSuperClass = 2;
                Term classBody = 3;
              }
message Load { Term loadPath = 1;
               repeated Term loadWrap = 2;
             }
message LowPrecedenceAnd { Term lhs = 1;
                           Term rhs = 2;
                         }
message LowPrecedenceOr { Term lhs = 1;
                          Term rhs = 2;
                        }
message Module { Term moduleIdentifier = 1;
                 repeated Term moduleStatements = 2;
               }
message Require { bool requireRelative = 1;
                  Term requirePath = 2;
                }
message Send { repeated Term sendReceiver = 1;
               repeated Term sendSelector = 2;
               repeated Term sendArgs = 3;
               repeated Term sendBlock = 4;
             }
message Syntax { oneof syntax {Comment comment = 1;
                               Function function = 2;
                               Boolean boolean = 3;
                               Method method = 4;
                               File file = 5;
                               Line line = 6;
                               Plus plus = 7;
                               Minus minus = 8;
                               Times times = 9;
                               DividedBy dividedBy = 10;
                               Modulo modulo = 11;
                               Power power = 12;
                               Negate negate = 13;
                               FloorDivision floorDivision = 14;
                               BAnd bAnd = 15;
                               BOr bOr = 16;
                               BXOr bXOr = 17;
                               LShift lShift = 18;
                               RShift rShift = 19;
                               Complement complement = 20;
                               And and = 21;
                               Not not = 22;
                               Or or = 23;
                               XOr xOr = 24;
                               Call call = 25;
                               LessThan lessThan = 26;
                               LessThanEqual lessThanEqual = 27;
                               GreaterThan greaterThan = 28;
                               GreaterThanEqual greaterThanEqual = 29;
                               Equal equal = 30;
                               StrictEqual strictEqual = 31;
                               Comparison comparison = 32;
                               Enumeration enumeration = 33;
                               Matches matches = 34;
                               NotMatches notMatches = 35;
                               MemberAccess memberAccess = 36;
                               ScopeResolution scopeResolution = 37;
                               Subscript subscript = 38;
                               Member member = 39;
                               Array array = 40;
                               Complex complex = 41;
                               Float float = 42;
                               Hash hash = 43;
                               Integer integer = 44;
                               KeyValue keyValue = 45;
                               Null null = 46;
                               Rational rational = 47;
                               Regex regex = 48;
                               String string = 49;
                               Symbol symbol = 50;
                               TextElement textElement = 51;
                               Assignment assignment = 52;
                               Break break = 53;
                               Catch catch = 54;
                               Continue continue = 55;
                               Else else = 56;
                               Finally finally = 57;
                               ForEach forEach = 58;
                               If if = 59;
                               Match match = 60;
                               Pattern pattern = 61;
                               Retry retry = 62;
                               Return return = 63;
                               ScopeEntry scopeEntry = 64;
                               ScopeExit scopeExit = 65;
                               Statements statements = 66;
                               Try try = 67;
                               While while = 68;
                               Yield yield = 69;
                               Context context = 70;
                               Empty empty = 71;
                               Error error = 72;
                               Identifier identifier = 73;
                               Class class = 74;
                               Load load = 75;
                               LowPrecedenceAnd lowPrecedenceAnd = 76;
                               LowPrecedenceOr lowPrecedenceOr = 77;
                               Module module = 78;
                               Require require = 79;
                               Send send = 80;}
               }
message Term { Syntax syntax = 1;
             }