// This file was generated by proto-gen. Do not edit by hand.
syntax = "proto3";

package github.semantic.javadiff;

import "types.proto";

option java_package = "com.github.semantic.javadiff";
option go_package = "github.com/semantic/javadiff;java";

message JavaDiff {
  oneof diff {
    Merge merge = 1;
    Delete delete = 2;
    Insert insert = 3;
    Replace replace = 4;
  }
  message Merge {
    JavaSyntax syntax = 1;
  }
  message Delete {
    JavaSyntax before = 1;
  }
  message Insert {
    JavaSyntax after = 1;
  }
  message Replace {
    JavaSyntax before = 1;
    JavaSyntax after = 2;
  }
}

message JavaSyntax {
  oneof syntax {
    Comment comment = 1;
    Class class = 2;
    InterfaceDeclaration interfaceDeclaration = 3;
    Method method = 4;
    VariableDeclaration variableDeclaration = 5;
    Plus plus = 6;
    Minus minus = 7;
    Times times = 8;
    DividedBy dividedBy = 9;
    Modulo modulo = 10;
    Power power = 11;
    Negate negate = 12;
    FloorDivision floorDivision = 13;
    Call call = 14;
    LessThan lessThan = 15;
    LessThanEqual lessThanEqual = 16;
    GreaterThan greaterThan = 17;
    GreaterThanEqual greaterThanEqual = 18;
    Equal equal = 19;
    StrictEqual strictEqual = 20;
    Comparison comparison = 21;
    BOr bOr = 22;
    BXOr bXOr = 23;
    BAnd bAnd = 24;
    LShift lShift = 25;
    RShift rShift = 26;
    UnsignedRShift unsignedRShift = 27;
    Complement complement = 28;
    And and = 29;
    Not not = 30;
    Or or = 31;
    XOr xOr = 32;
    InstanceOf instanceOf = 33;
    MemberAccess memberAccess = 34;
    Subscript subscript = 35;
    Member member = 36;
    Super super = 37;
    This this = 38;
    AnnotatedType annotatedType = 39;
    JavaAnnotation javaAnnotation = 40;
    AnnotationField annotationField = 41;
    AnnotationTypeElement annotationTypeElement = 42;
    ArrayCreationExpression arrayCreationExpression = 43;
    AssertStatement assertStatement = 44;
    Asterisk asterisk = 45;
    CatchType catchType = 46;
    Constructor constructor = 47;
    ClassBody classBody = 48;
    ClassLiteral classLiteral = 49;
    DefaultValue defaultValue = 50;
    DimsExpr dimsExpr = 51;
    EnumDeclaration enumDeclaration = 52;
    GenericType genericType = 53;
    Import import = 54;
    Lambda lambda = 55;
    LambdaBody lambdaBody = 56;
    MethodReference methodReference = 57;
    Module module = 58;
    New new = 59;
    NewKeyword newKeyword = 60;
    Package package = 61;
    SpreadParameter spreadParameter = 62;
    StaticInitializer staticInitializer = 63;
    Synchronized synchronized = 64;
    TryWithResources tryWithResources = 65;
    TypeParameter typeParameter = 66;
    TypeWithModifiers typeWithModifiers = 67;
    Variable variable = 68;
    Wildcard wildcard = 69;
    WildcardBounds wildcardBounds = 70;
    Array array = 71;
    Boolean boolean = 72;
    Integer integer = 73;
    Float float = 74;
    Null null = 75;
    String string = 76;
    TextElement textElement = 77;
    Assignment assignment = 78;
    Break break = 79;
    Catch catch = 80;
    Continue continue = 81;
    DoWhile doWhile = 82;
    Finally finally = 83;
    For for = 84;
    ForEach forEach = 85;
    If if = 86;
    Match match = 87;
    Pattern pattern = 88;
    PostIncrement postIncrement = 89;
    PostDecrement postDecrement = 90;
    PreIncrement preIncrement = 91;
    PreDecrement preDecrement = 92;
    While while = 93;
    Statements statements = 94;
    Throw throw = 95;
    Try try = 96;
    Context context = 97;
    Empty empty = 98;
    Error error = 99;
    Identifier identifier = 100;
    AccessibilityModifier accessibilityModifier = 101;
    TypeArray typeArray = 102;
    Bool bool = 103;
    Int int = 104;
    Void void = 105;
    TypeFloat typeFloat = 106;
    Annotation annotation = 107;
    Return return = 108;
    List list = 109;
  }
}

message Comment {
  string commentContent = 1;
}

message Class {
  repeated JavaDiff classContext = 1;
  JavaDiff classIdentifier = 2;
  repeated JavaDiff classSuperclasses = 3;
  JavaDiff classBody = 4;
}

message InterfaceDeclaration {
  repeated JavaDiff interfaceDeclarationContext = 1;
  JavaDiff interfaceDeclarationIdentifier = 2;
  repeated JavaDiff interfaceDeclarationSuperInterfaces = 3;
  JavaDiff interfaceDeclarationBody = 4;
}

message Method {
  repeated JavaDiff methodContext = 1;
  JavaDiff methodReceiver = 2;
  JavaDiff methodName = 3;
  repeated JavaDiff methodParameters = 4;
  JavaDiff methodBody = 5;
}

message VariableDeclaration {
  repeated JavaDiff variableDeclarations = 1;
}

message Plus {
  JavaDiff lhs = 1;
  JavaDiff rhs = 2;
}

message Minus {
  JavaDiff lhs = 1;
  JavaDiff rhs = 2;
}

message Times {
  JavaDiff lhs = 1;
  JavaDiff rhs = 2;
}

message DividedBy {
  JavaDiff lhs = 1;
  JavaDiff rhs = 2;
}

message Modulo {
  JavaDiff lhs = 1;
  JavaDiff rhs = 2;
}

message Power {
  JavaDiff lhs = 1;
  JavaDiff rhs = 2;
}

message Negate {
  JavaDiff value = 1;
}

message FloorDivision {
  JavaDiff lhs = 1;
  JavaDiff rhs = 2;
}

message Call {
  repeated JavaDiff callContext = 1;
  JavaDiff callFunction = 2;
  repeated JavaDiff callParams = 3;
  JavaDiff callBlock = 4;
}

message LessThan {
  JavaDiff lhs = 1;
  JavaDiff rhs = 2;
}

message LessThanEqual {
  JavaDiff lhs = 1;
  JavaDiff rhs = 2;
}

message GreaterThan {
  JavaDiff lhs = 1;
  JavaDiff rhs = 2;
}

message GreaterThanEqual {
  JavaDiff lhs = 1;
  JavaDiff rhs = 2;
}

message Equal {
  JavaDiff lhs = 1;
  JavaDiff rhs = 2;
}

message StrictEqual {
  JavaDiff lhs = 1;
  JavaDiff rhs = 2;
}

message Comparison {
  JavaDiff lhs = 1;
  JavaDiff rhs = 2;
}

message BOr {
  JavaDiff left = 1;
  JavaDiff right = 2;
}

message BXOr {
  JavaDiff left = 1;
  JavaDiff right = 2;
}

message BAnd {
  JavaDiff left = 1;
  JavaDiff right = 2;
}

message LShift {
  JavaDiff left = 1;
  JavaDiff right = 2;
}

message RShift {
  JavaDiff left = 1;
  JavaDiff right = 2;
}

message UnsignedRShift {
  JavaDiff left = 1;
  JavaDiff right = 2;
}

message Complement {
  JavaDiff value = 1;
}

message And {
  JavaDiff lhs = 1;
  JavaDiff rhs = 2;
}

message Not {
  JavaDiff value = 1;
}

message Or {
  JavaDiff lhs = 1;
  JavaDiff rhs = 2;
}

message XOr {
  JavaDiff lhs = 1;
  JavaDiff rhs = 2;
}

message InstanceOf {
  JavaDiff instanceOfSubject = 1;
  JavaDiff instanceOfObject = 2;
}

message MemberAccess {
  JavaDiff lhs = 1;
  bytes rhs = 2;
}

message Subscript {
  JavaDiff lhs = 1;
  repeated JavaDiff rhs = 2;
}

message Member {
  JavaDiff lhs = 1;
  JavaDiff rhs = 2;
}

message Super { }

message This { }

message AnnotatedType {
  repeated JavaDiff annotationes = 1;
  JavaDiff annotatedType = 2;
}

message JavaAnnotation {
  JavaDiff annotationName = 1;
  repeated JavaDiff annotationField = 2;
}

message AnnotationField {
  JavaDiff annotationFieldName = 1;
  JavaDiff annotationFieldValue = 2;
}

message AnnotationTypeElement {
  repeated JavaDiff modifiers = 1;
  JavaDiff annotationType = 2;
  JavaDiff identifier = 3;
  repeated JavaDiff dims = 4;
  JavaDiff defaultValue = 5;
}

message ArrayCreationExpression {
  JavaDiff arrayCreationExpressionType = 1;
  repeated JavaDiff arrayCreationExpressionDims = 2;
}

message AssertStatement {
  JavaDiff assertLHS = 1;
  repeated JavaDiff assertRHS = 2;
}

message Asterisk { }

message CatchType {
  repeated JavaDiff types = 1;
}

message Constructor {
  repeated JavaDiff constructorModifiers = 1;
  repeated JavaDiff constructorTypeParams = 2;
  JavaDiff constructorIdentifier = 3;
  repeated JavaDiff constructorParams = 4;
  repeated JavaDiff constructorThrows = 5;
  JavaDiff constructorBody = 6;
}

message ClassBody {
  repeated JavaDiff classBodyExpression = 1;
}

message ClassLiteral {
  JavaDiff classLiteralType = 1;
}

message DefaultValue {
  JavaDiff defaultValueElement = 1;
}

message DimsExpr {
  repeated JavaDiff dimsExprAnnotation = 1;
  repeated JavaDiff dimsExprExpression = 2;
}

message EnumDeclaration {
  repeated JavaDiff enumDeclarationModifier = 1;
  JavaDiff enumDeclarationIdentifier = 2;
  repeated JavaDiff enumDeclarationSuperInterfaces = 3;
  repeated JavaDiff enumDeclarationConstant = 4;
  repeated JavaDiff enumDeclarationBody = 5;
}

message GenericType {
  JavaDiff genericTypeIdentifier = 1;
  repeated JavaDiff genericTypeArguments = 2;
}

message Import {
  repeated JavaDiff imports = 1;
}

message Lambda {
  repeated JavaDiff lambdaParams = 1;
  JavaDiff lambdaBody = 2;
}

message LambdaBody {
  repeated JavaDiff lambdaBodyExpression = 1;
}

message MethodReference {
  JavaDiff methodReferenceType = 1;
  repeated JavaDiff methodReferenceTypeArgs = 2;
  JavaDiff methodReferenceIdentifier = 3;
}

message Module {
  JavaDiff moduleIdentifier = 1;
  repeated JavaDiff moduleStatements = 2;
}

message New {
  JavaDiff newType = 1;
  repeated JavaDiff newArgs = 2;
  repeated JavaDiff newClassBody = 3;
}

message NewKeyword { }

message Package {
  repeated JavaDiff packages = 1;
}

message SpreadParameter {
  JavaDiff spreadParameterVariableDeclarator = 1;
}

message StaticInitializer {
  JavaDiff staticInitializerBlock = 1;
}

message Synchronized {
  JavaDiff synchronizedSubject = 1;
  JavaDiff synchronizedBody = 2;
}

message TryWithResources {
  repeated JavaDiff tryResources = 1;
  JavaDiff tryBody = 2;
  repeated JavaDiff tryCatch = 3;
}

message TypeParameter {
  repeated JavaDiff typeParamAnnotation = 1;
  JavaDiff typeParamIdentifier = 2;
  repeated JavaDiff typeParamTypeBound = 3;
}

message TypeWithModifiers {
  repeated JavaDiff types = 1;
  JavaDiff modifier = 2;
}

message Variable {
  repeated JavaDiff variableModifiers = 1;
  JavaDiff variableType = 2;
  JavaDiff variableName = 3;
}

message Wildcard {
  repeated JavaDiff wildcardAnnotation = 1;
  repeated JavaDiff wildcardBounds = 2;
}

message WildcardBounds {
  oneof sum {
    JavaDiff wildcardBoundExtendsType = 1;
    JavaDiff wildcardBoundSuperType = 2;
  }
}

message Array {
  repeated JavaDiff arrayElements = 1;
}

message Boolean {
  bool booleanContent = 1;
}

message Integer {
  string integerContent = 1;
}

message Float {
  string floatContent = 1;
}

message Null { }

message String {
  repeated JavaDiff stringElements = 1;
}

message TextElement {
  string textElementContent = 1;
}

message Assignment {
  repeated JavaDiff assignmentContext = 1;
  JavaDiff assignmentTarget = 2;
  JavaDiff assignmentValue = 3;
}

message Break {
  JavaDiff value = 1;
}

message Catch {
  JavaDiff catchException = 1;
  JavaDiff catchBody = 2;
}

message Continue {
  JavaDiff value = 1;
}

message DoWhile {
  JavaDiff doWhileCondition = 1;
  JavaDiff doWhileBody = 2;
}

message Finally {
  JavaDiff value = 1;
}

message For {
  JavaDiff forBefore = 1;
  JavaDiff forCondition = 2;
  JavaDiff forStep = 3;
  JavaDiff forBody = 4;
}

message ForEach {
  JavaDiff forEachBinding = 1;
  JavaDiff forEachSubject = 2;
  JavaDiff forEachBody = 3;
}

message If {
  JavaDiff ifCondition = 1;
  JavaDiff ifThenBody = 2;
  JavaDiff ifElseBody = 3;
}

message Match {
  JavaDiff matchSubject = 1;
  JavaDiff matchPatterns = 2;
}

message Pattern {
  JavaDiff value = 1;
  JavaDiff patternBody = 2;
}

message PostIncrement {
  JavaDiff value = 1;
}

message PostDecrement {
  JavaDiff value = 1;
}

message PreIncrement {
  JavaDiff value = 1;
}

message PreDecrement {
  JavaDiff value = 1;
}

message While {
  JavaDiff whileCondition = 1;
  JavaDiff whileBody = 2;
}

message Statements {
  repeated JavaDiff statements = 1;
}

message Throw {
  JavaDiff value = 1;
}

message Try {
  JavaDiff tryBody = 1;
  repeated JavaDiff tryCatch = 2;
}

message Context {
  repeated JavaDiff contextTerms = 1;
  JavaDiff contextSubject = 2;
}

message Empty { }

message Error {
  repeated ErrorSite errorCallStack = 1;
  repeated string errorExpected = 2;
  string errorActual = 3;
  repeated JavaDiff errorChildren = 4;
}

message Identifier {
  bytes name = 1;
}

message AccessibilityModifier {
  string contents = 1;
}

message TypeArray {
  repeated JavaDiff arraySize = 1;
  JavaDiff arrayElementType = 2;
}

message Bool { }

message Int { }

message Void { }

message TypeFloat { }

message Annotation {
  JavaDiff annotationSubject = 1;
  JavaDiff annotationType = 2;
}

message Return {
  JavaDiff value = 1;
}

message List {
  repeated JavaDiff listContent = 1;
}
