# Set all targetâ€™s visibility in this package to "public".
package(default_visibility = ["//visibility:public"])

# Load rules_haskell rules.
load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_toolchain_library",
    "haskell_library",
    "haskell_binary",
)

load("@rules_haskell//haskell:cabal.bzl", "haskell_cabal_binary", "haskell_cabal_library")

# haskell_toolchain_library can access builtin GHC packages
# and assign them a bazel target name, so that they
# can be referenced as dependencies.
haskell_toolchain_library(name = "base")

# You can add your own libraries with haskell_library.
haskell_library(
    name = "lib",
    src_strip_prefix = "src",
    srcs = glob(['src/**/*.hs']),
    compiler_flags = ["-XOverloadedStrings"],
    deps = [
        ":base",
        "@stackage//:aeson",
        "@stackage//:bytestring",
        "@stackage//:containers",
        "@stackage//:deepseq",
        "@stackage//:filepath",
        "@stackage//:generic-monoid",
        "@stackage//:hashable",
        "@stackage//:semilattices",
        "@stackage//:text",
        "@stackage//:pathtype",
    ],
)

# An example binary using the Prelude module from the
# GHC base package, to print the hello world.
# haskell_binary(
#     name = "example",
#     srcs = [":Example.hs"],
#     deps = [":base"],
# )
